from flask_rebar import Rebar, SwaggerV2Generator
from marshmallow import Schema, fields

rebar = Rebar()
generator = SwaggerV2Generator()

# Define Flask Rebar schemas using Marshmallow
class CountrySchema(Schema):
    id = fields.String()
    name = fields.String()

class CompetitionSchema(Schema):
    id = fields.String()
    country_id = fields.String()
    name = fields.String()

class PlayerSchema(Schema):
    id = fields.String()
    first_name = fields.String()
    last_name = fields.String()
    birth_date = fields.Date(format='iso')
    position = fields.String()

class PlayerTeamNameSchema(Schema):
    id = fields.String()
    first_name = fields.String()
    last_name = fields.String()
    birth_date = fields.Date(format='iso')
    position = fields.String()
    team_name = fields.String()
    active = fields.String()

class TeamSchema(Schema):
    id = fields.String()
    name = fields.String()

class RefereeSchema(Schema):
    id = fields.String()
    name = fields.String()

class ScheduleSchema(Schema):
    match_number = fields.Integer()
    round_number = fields.Integer()
    date = fields.DateTime()
    location = fields.String()
    home_team_id = fields.String()
    away_team_id = fields.String()
    competition_id = fields.String()
    result = fields.String()

class PlayerTeamSchema(Schema):
    player_id = fields.String()
    team_id = fields.String()
    season = fields.String()

class MatchSchema(Schema):
    id = fields.String()
    season = fields.String()
    competition_id = fields.String()
    home_team_id = fields.String()
    away_team_id = fields.String()
    referee_id = fields.String()
    home_goals = fields.Integer()
    away_goals = fields.Integer()
    home_shots = fields.Integer()
    away_shots = fields.Integer()
    home_shots_on_target = fields.Integer()
    away_shots_on_target = fields.Integer()
    home_corners = fields.Integer()
    away_corners = fields.Integer()
    home_fouls = fields.Integer()
    away_fouls = fields.Integer()
    home_yellow_cards = fields.Integer()
    away_yellow_cards = fields.Integer()
    home_red_cards = fields.Integer()
    away_red_cards = fields.Integer()

class HistoricPlayerPerNinetySchema(Schema):
    player_id = fields.String()
    minutes_played = fields.Float()
    ninetys = fields.Float()
    goals = fields.Float()
    assists = fields.Float()
    goals_plus_assists = fields.Float()
    non_penalty_goals = fields.Float()
    penalties_scored = fields.Float()
    penalties_attempted = fields.Float()
    yellow_cards = fields.Float()
    red_cards = fields.Float()
    expected_goals = fields.Float()
    non_penalty_expected_goals = fields.Float()
    expected_assisted_goals = fields.Float()
    non_penalty_expected_goals_plus_expected_assisted_goals = fields.Float()
    progressive_carries = fields.Float()
    progressive_passes = fields.Float()
    progressive_passes_received = fields.Float()
    total_passing_distance = fields.Float()
    total_progressive_passing_distance = fields.Float()
    short_passes_completed = fields.Float()
    short_passes_attempted = fields.Float()
    medium_passes_completed = fields.Float()
    medium_passes_attempted = fields.Float()
    long_passes_completed = fields.Float()
    long_passes_attempted = fields.Float()
    expected_assists = fields.Float()
    assists_minus_expected_assisted_goals = fields.Float()
    key_passes = fields.Float()
    passes_into_final_third = fields.Float()
    passes_into_penalty_area = fields.Float()
    crosses_into_penalty_area = fields.Float()
    shots = fields.Float()
    shots_on_target = fields.Float()
    goals_divided_by_shots = fields.Float()
    goals_divided_by_shots_on_target = fields.Float()
    average_shot_distance = fields.Float()
    shots_from_free_kicks = fields.Float()
    shots_from_penalties = fields.Float()
    non_penalty_expected_goals_divided_by_shots = fields.Float()
    goals_minus_expected_goals = fields.Float()
    non_penalty_goals_minus_non_penalty_expected_goals = fields.Float()
    touches = fields.Float()
    touches_in_defensive_penalty_area = fields.Float()
    touches_in_defensive_third = fields.Float()
    touches_in_middle_third = fields.Float()
    touches_in_attacking_third = fields.Float()
    touches_in_attacking_penalty_area = fields.Float()
    live_ball_touches = fields.Float()
    take_ons_attempted = fields.Float()
    take_ons_succeeded = fields.Float()
    times_tackled_during_take_on = fields.Float()
    carries = fields.Float()
    total_carrying_distance = fields.Float()
    progressive_carrying_distance = fields.Float()
    carries_into_final_third = fields.Float()
    carries_into_penalty_area = fields.Float()
    miscontrols = fields.Float()
    dispossessed = fields.Float()
    passes_received = fields.Float()
    tackles = fields.Float()
    tackles_won = fields.Float()
    defensive_third_tackles = fields.Float()
    middle_third_tackles = fields.Float()
    attacking_third_tackles = fields.Float()
    dribblers_tackled = fields.Float()
    dribbler_tackles_attempted = fields.Float()
    shots_blocked = fields.Float()
    passes_blocked = fields.Float()
    interceptions = fields.Float()
    clearances = fields.Float()
    errors_leading_to_shot = fields.Float()
    goals_against = fields.Float()
    shots_on_target_against = fields.Float()
    saves = fields.Float()
    clean_sheets = fields.Float()
    penalties_faced = fields.Float()
    penalties_allowed = fields.Float()
    penalties_saved = fields.Float()
    penalties_missed = fields.Float()
    season = fields.String()
